@model SkinShop.Models.ViewModels.CreateContainerVM

@Styles.Render("~/Content/SkinShopCSS/CreateSkin.css")
<div class="caption gradient-text">Создать вещь</div>
@if (ViewBag.Status == false)
{
    <div class="text-danger">
        @if (ViewBag.Result != null)
        {
            <p>
                @ViewBag.Result
            </p>
        }
    </div>
}
else
{
    <div class="text-success">
        @if (ViewBag.Result != null)
        {
            <p>
                @ViewBag.Result
            </p>
        }
    </div>
}

@using (Html.BeginForm("CreateContainer", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", @id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeOfHard, htmlAttributes: new { @class = "control-label" })
            <div>
                <select name="TypeOfHard" class="form-control">
                    <option>Easy</option>
                    <option>Medium</option>
                    <option>Hard</option>
                    <option>Very hard</option>
                    <option>Ultra hard</option>
                </select>
                @Html.ValidationMessageFor(model => model.TypeOfHard, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChanseForRare, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.ChanseForRare, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChanseForRare, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MinRare, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.MinRare, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MinRare, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MaxRare, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.MaxRare, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MaxRare, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChanseForLegendary, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.ChanseForLegendary, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ChanseForLegendary, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Products, htmlAttributes: new { @class = "control-label" })
            <div>
                <select name="SelectedProducts" class="form-control" multiple>
                    @if (Model!= null && Model.Products != null)
                    {
                        foreach (var i in Model.Products)
                        {
                            <option value="@i.Value">@i.Text</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Products, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sale, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Sale, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sale, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model != null && Model.ImagesInDatebase != null)
        {
            <div class="imgtext">Текущие изображения</div>
            foreach (var i in Model.ImagesInDatebase)
            {
                <div class="imgblock">
                    <img src="@String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(i.Photo))" alt="@i.Text" class="img-responsive imgcustom">
                </div>
            }
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label" })
            <div>
                <input name="Images" type="file" accept=".jpg" />
                @Html.ValidationMessageFor(model => model.Images, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Alt, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Alt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Alt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Properties, htmlAttributes: new { @class = "control-label" })
            <div>
                <span>Название: <input type="text" name="Property.Name" class="form-control" /></span>
                <span>Значение: <input type="text" name="Property.Value" class="form-control" /></span>
            </div>
        </div>

        <div class="form-group">
            <div>
                <input type="submit" value="Сохранить" class="btn btn-success" />
            </div>
        </div>
    </div>
}