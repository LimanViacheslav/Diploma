@model SkinShop.Models.RegisterModel
@{
    ViewBag.Title = "RegisterView";
}
@Styles.Render("~/Content/SkinShopCSS/Register.css")
@if (User.IsInRole("admin"))
{
    <div class="caption gradient-text">Д о б а в и т ь м е н е д ж е р а</div>
}
else
{
    <div class="caption gradient-text">Р е г и с т р а ц и я</div>
}
@{
    string action, controller;
    if (User.IsInRole("admin"))
    {
        action = "CreateEmployee";
        controller = "Admin";
    }
    else
    {
        action = "Register";
        controller = "Account";
    }
    if (!User.Identity.IsAuthenticated)
    {
        action = "Register";
        controller = "Account";
    }
}
@if (ViewBag.Result != "")
{
    <div class="text-danger">@ViewBag.Result</div>
}
@using (Html.BeginForm(action, controller, FormMethod.Post, new { enctype = "multipart/form-data", @id = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Электронная почта", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Пароль", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Подтвердить пароль", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Адрес", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Имя", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Номер телефона", htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model != null && Model.ImagesInDatebase != null)
        {
            <div class="imgtext">Текущие изображения</div>
            foreach (var i in Model.ImagesInDatebase)
            {
                <div class="imgblock">
                    <img src="@String.Format("data:image/gif;base64,{0}", Convert.ToBase64String(i.Photo))" alt="@i.Text" class="img-responsive imgcustom">
                </div>
            }
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label" })
            <div>
                <input name="Images" type="file" />
                @Html.ValidationMessageFor(model => model.Images, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Alt, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Alt, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Alt, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div>
                @if (!User.Identity.IsAuthenticated)
                {
                    <input type="submit" value="Зарегистрироваться" class="btn btn-success" />
                }
                @if (User.IsInRole("admin"))
                {
                    <input type="submit" value="Добавить" class="btn btn-success" />
                }
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
